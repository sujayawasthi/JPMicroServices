package com.example.restcontroller;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Resources;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.client.RestTemplate;

import com.example.dto.OperatingStatement;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@org.springframework.web.bind.annotation.RestController
public class RestController {

	@Autowired
	RestTemplate restTemplate;

	@HystrixCommand(fallbackMethod = "showerror")
	@RequestMapping(method = RequestMethod.GET, value = "/types")
	List<String> getOperStmts() {

		ResponseEntity<Resources<OperatingStatement>> response = this.restTemplate
				.exchange(
						"http://operating-statement-spreading-service/operatingStatements",
						HttpMethod.GET, null, getParameterizedTypeReference());

		List<OperatingStatement> operStatements = new ArrayList<OperatingStatement>(
				response.getBody().getContent());

		return extractTypesFromOs(operStatements);
	}

	public List<String> showerror() {
		List<String> error = new ArrayList<String>();
		error.add("Unable to access the Service at this time");

		return error;

	}

	private List<String> extractTypesFromOs(List<OperatingStatement> operStatements) {
		return operStatements.stream().map(os -> os.getType())
				.collect(Collectors.toList());
	}

	private ParameterizedTypeReference<Resources<OperatingStatement>> getParameterizedTypeReference() {

		return new ParameterizedTypeReference<Resources<OperatingStatement>>() {
		};
	}

}
