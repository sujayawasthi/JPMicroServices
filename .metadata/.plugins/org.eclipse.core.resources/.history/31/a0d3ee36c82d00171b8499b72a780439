package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@EnableDiscoveryClient
@SpringBootApplication
@EnableResourceServer
public class AuthServiceApplication {

	@RestController
	public static class PrincipalRestController {

		@RequestMapping("/user")
		public Principal principal(Principal p) {
			return p; 
		}
	}

	@Component
	public static class AccountInitializer implements CommandLineRunner {

		private final AccountRepository accountRepository;

		AccountInitializer(AccountRepository accountRepository) {
			this.accountRepository = accountRepository;
		}

		@Override
		public void run(String... strings) throws Exception {
			Stream.of("jlong,spring", "dsyer,cloud").map(x -> x.split(",")).forEach(
					tpl -> this.accountRepository.save(new Account(tpl[0], tpl[1])));
		}
	}

	@Service
	public static class JpaUserDetailsService implements UserDetailsService {

		private final AccountRepository accountRepository;

		JpaUserDetailsService(AccountRepository accountRepository) {
			this.accountRepository = accountRepository;
		}

		@Override
		public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {

			Optional<Account> accountOptional = accountRepository.findByUsername(s);

			return accountOptional
					.map(a -> new User(a.getUsername(), a.getPassword(), a.isActive(),
							a.isActive(), a.isActive(), a.isActive(),
							AuthorityUtils.createAuthorityList("ROLE_USER",
									"ROLE_ADMIN")))
					.orElseThrow(() -> new UsernameNotFoundException(
							"couldn't find  " + s + "!"));
		}
	}

	@Configuration
	@EnableAuthorizationServer
	public static class AuthServerConfiguration
			extends AuthorizationServerConfigurerAdapter {

		private final AuthenticationManager authenticationManager;

		AuthServerConfiguration(AuthenticationManager am) {
			this.authenticationManager = am;
		}

		@Override
		public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
			clients.inMemory()
					.withClient("html5").secret("secret").scopes("openid").authorizedGrantTypes("password");
		}

		@Override
		public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
			endpoints.authenticationManager(this.authenticationManager);
		}
	}